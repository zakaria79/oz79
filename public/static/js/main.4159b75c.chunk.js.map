{"version":3,"sources":["components/app-bar/AppBar.js","components/drawer/Drawer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","props","classes","className","AppBar","position","Toolbar","IconButton","onClick","toggleDrawer","edge","color","aria-label","Typography","variant","Button","list","width","fullList","TemporaryDrawer","sideList","side","role","onKeyDown","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","Divider","Drawer","open","state","left","onClose","anchor","top","bottom","right","App","React","useState","setState","event","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UASMA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,MAIC,SAASK,EAAaC,GACnC,IAAMC,EAAUX,IAEhB,OACE,yBAAKY,UAAWD,EAAQR,MACtB,kBAACU,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAASP,EAAMQ,aAAa,QAAQ,GACpCC,KAAK,QACLP,UAAWD,EAAQN,WACnBe,MAAM,UACNC,aAAW,QACX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKX,UAAWD,EAAQH,OAA5C,QAGA,kBAACgB,EAAA,EAAD,CAAQJ,MAAM,WAAd,Y,sFC3BJpB,EAAYC,YAAW,CAC3BwB,KAAM,CACJC,MAAO,KAETC,SAAU,CACRD,MAAO,UAII,SAASE,EAAgBlB,GACtC,IAAMC,EAAUX,IAEV6B,EAAW,SAAAC,GAAI,OACnB,yBACElB,UAAWD,EAAQc,KACnBM,KAAK,eACLd,QAASP,EAAMQ,aAAaY,GAAM,GAClCE,UAAWtB,EAAMQ,aAAaY,GAAM,IACpC,kBAACG,EAAA,EAAD,KACG,CAAC,QAAS,UAAW,aAAc,UAAUC,IAAI,SAACC,EAAMC,GAAP,OAChD,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAErC,kBAACK,EAAA,EAAD,CAAcC,QAASP,QAI7B,kBAACQ,EAAA,EAAD,MACA,kBAACV,EAAA,EAAD,KACG,CAAC,WAAY,QAAS,QAAQC,IAAI,SAACC,EAAMC,GAAP,OACjC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAErC,kBAACK,EAAA,EAAD,CAAcC,QAASP,UAO3BR,EAAW,SAAAG,GAAI,OACnB,yBACElB,UAAWD,EAAQgB,SACnBI,KAAK,eACLd,QAASP,EAAMQ,aAAaY,GAAM,GAClCE,UAAWtB,EAAMQ,aAAaY,GAAM,IACpC,kBAACG,EAAA,EAAD,KACG,CAAC,QAAS,UAAW,aAAc,UAAUC,IAAI,SAACC,EAAMC,GAAP,OAChD,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAErC,kBAACK,EAAA,EAAD,CAAcC,QAASP,QAI7B,kBAACQ,EAAA,EAAD,MACA,kBAACV,EAAA,EAAD,KACG,CAAC,WAAY,QAAS,QAAQC,IAAI,SAACC,EAAMC,GAAP,OACjC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAErC,kBAACK,EAAA,EAAD,CAAcC,QAASP,UAOjC,OACE,6BACE,kBAACS,EAAA,EAAD,CACEC,KAAMnC,EAAMoC,MAAMC,KAClBC,QAAStC,EAAMQ,aAAa,QAAQ,IACnCW,EAAS,SAEZ,kBAACe,EAAA,EAAD,CACEK,OAAO,MACPJ,KAAMnC,EAAMoC,MAAMI,IAClBF,QAAStC,EAAMQ,aAAa,OAAO,IAClCS,EAAS,QAEZ,kBAACiB,EAAA,EAAD,CACEK,OAAO,SACPJ,KAAMnC,EAAMoC,MAAMK,OAClBH,QAAStC,EAAMQ,aAAa,UAAU,IACrCS,EAAS,WAEZ,kBAACiB,EAAA,EAAD,CACEK,OAAO,QACPJ,KAAMnC,EAAMoC,MAAMM,MAClBJ,QAAStC,EAAMQ,aAAa,SAAS,IACpCW,EAAS,W,4NCzEHwB,MA7Bf,WAAgB,IAAD,EACaC,IAAMC,SAAS,CACvCL,KAAK,EACLH,MAAM,EACNI,QAAQ,EACRC,OAAO,IALI,mBACNN,EADM,KACCU,EADD,KAQPtC,EAAe,SAACY,EAAMe,GAAP,OAAgB,SAAAY,IAElB,YAAfA,EAAMC,MACS,QAAdD,EAAMlB,KAA+B,UAAdkB,EAAMlB,MAKhCiB,E,qVAAS,CAAD,GAAKV,EAAL,eAAahB,EAAOe,OAG9B,OACE,yBAAKjC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAQM,aAAcA,IACtB,kBAAC,EAAD,CAAQA,aAAcA,EAAc4B,MAAOA,OChB/Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4159b75c.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            onClick={props.toggleDrawer('left', true)}\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            News\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n});\n\nexport default function TemporaryDrawer(props) {\n  const classes = useStyles();\n\n  const sideList = side => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={props.toggleDrawer(side, false)}\n      onKeyDown={props.toggleDrawer(side, false)}>\n      <List>\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  const fullList = side => (\n    <div\n      className={classes.fullList}\n      role=\"presentation\"\n      onClick={props.toggleDrawer(side, false)}\n      onKeyDown={props.toggleDrawer(side, false)}>\n      <List>\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      <Drawer\n        open={props.state.left}\n        onClose={props.toggleDrawer('left', false)}>\n        {sideList('left')}\n      </Drawer>\n      <Drawer\n        anchor=\"top\"\n        open={props.state.top}\n        onClose={props.toggleDrawer('top', false)}>\n        {fullList('top')}\n      </Drawer>\n      <Drawer\n        anchor=\"bottom\"\n        open={props.state.bottom}\n        onClose={props.toggleDrawer('bottom', false)}>\n        {fullList('bottom')}\n      </Drawer>\n      <Drawer\n        anchor=\"right\"\n        open={props.state.right}\n        onClose={props.toggleDrawer('right', false)}>\n        {sideList('right')}\n      </Drawer>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport AppBar from './components/app-bar/AppBar';\nimport Drawer from './components/drawer/Drawer';\n\nfunction App() {\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (side, open) => event => {\n    if (\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState({...state, [side]: open});\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBar toggleDrawer={toggleDrawer} />\n        <Drawer toggleDrawer={toggleDrawer} state={state} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}